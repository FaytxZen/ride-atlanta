apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'jacoco'

repositories {
    maven { url 'https://maven.fabric.io/public' }
}

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"
    defaultConfig {
        applicationId "com.andrewvora.apps.rideatlanta"
        minSdkVersion 16
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            minifyEnabled false
            shrinkResources false
            testCoverageEnabled true

            buildConfigField "String", "MARTA_API_KEY", "\"$System.env.RIDEATLANTA_MARTA_API_KEY\""
            buildConfigField "String", "FABRIC_API_KEY", "\"$System.env.RIDEATLANTA_FABRIC_API_KEY\""
            buildConfigField "String", "TWITTER_API_KEY", "\"$System.env.RIDEATLANTA_TWITTER_API_KEY\""
            buildConfigField "String", "TWITTER_SECRET", "\"$System.env.RIDEATLANTA_TWITTER_SECRET\""
        }
        release {
            minifyEnabled true
            shrinkResources true
            useProguard true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            buildConfigField "String", "MARTA_API_KEY", "\"$System.env.RIDEATLANTA_PROD_MARTA_API_KEY\""
            buildConfigField "String", "FABRIC_API_KEY", "\"$System.env.RIDEATLANTA_PROD_FABRIC_API_KEY\""
            buildConfigField "String", "TWITTER_API_KEY", "\"$System.env.RIDEATLANTA_PROD_TWITTER_API_KEY\""
            buildConfigField "String", "TWITTER_SECRET", "\"$System.env.RIDEATLANTA_PROD_TWITTER_SECRET\""
        }
    }

    testOptions {
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }
}

def appCompatVersion = '25.3.1'
def leakCanaryVersion = '1.3.1'

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    // System Dependencies
    compile "com.android.support:appcompat-v7:$appCompatVersion"
    compile "com.android.support:design:$appCompatVersion"
    compile "com.android.support:cardview-v7:$appCompatVersion"
    compile "com.android.support:recyclerview-v7:$appCompatVersion"
    compile 'com.roughike:bottom-bar:2.0.2'
    compile('com.twitter.sdk.android:twitter:2.2.0@aar') {
        transitive = true;
    }

    compile 'com.jakewharton:butterknife:8.4.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.4.0'

    compile 'com.android.volley:volley:1.0.0'
    compile 'com.google.code.gson:gson:2.7'

    debugCompile "com.squareup.leakcanary:leakcanary-android:$leakCanaryVersion"
    releaseCompile "com.squareup.leakcanary:leakcanary-android-no-op:$leakCanaryVersion"
    testCompile "com.squareup.leakcanary:leakcanary-android-no-op:$leakCanaryVersion"

    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.10.19'
}

jacoco {
    toolVersion '0.7.9'
    reportsDir = file("$buildDir/jacocoReports")
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec",
            "outputs/code-coverage/connected/*coverage.ec"
    ])
}
